import java.util.*;
/**
 * This class provides a convenient way to test shuffling methods.
 */
public class Shuffler {

 /**
  * The number of consecutive shuffle steps to be performed in each call
  * to each sorting procedure.
  */
 private static final int SHUFFLE_COUNT = 1;

 /**
  * The number of values to shuffle.
  */
 private static final int VALUE_COUNT = 4;

 /**
  * Tests shuffling methods.
  * @param args is not used.
  */
 public static void main(String[] args) {
  System.out.println("Results of " + SHUFFLE_COUNT +
         " consecutive perfect shuffles:");
  int[] values1 = new int[VALUE_COUNT];
  for (int i = 0; i < values1.length; i++) {
   values1[i] = i;
   }
  for (int j = 1; j <= SHUFFLE_COUNT; j++) {
   perfectShuffle(values1);
   System.out.print("  " + j + ":");
   for (int k = 0; k < values1.length; k++) {
    System.out.print(" " + values1[k]);
   }
   System.out.println();
  }
  System.out.println();

  System.out.println("Results of " + SHUFFLE_COUNT +
         " consecutive efficient selection shuffles:");
  int[] values2 = new int[VALUE_COUNT];
  for (int i = 0; i < values2.length; i++) {
   values2[i] = i;
   }
  for (int j = 1; j <= SHUFFLE_COUNT; j++) {
   selectionShuffle(values2);
   System.out.print("  " + j + ":");
   for (int k = 0; k < values2.length; k++) {
    System.out.print(" " + values2[k]);
   }
   System.out.println();
  }
  System.out.println();
 }


 /**
  * Apply a "perfect shuffle" to the argument.
  * The perfect shuffle algorithm splits the deck in half, then interleaves
  * the cards in one half with the cards in the other.
  * @param values is an array of integers simulating cards to be shuffled.
  */
 public static void perfectShuffle(int[] values) {
   int[] first = new int[values.length/2];
   
   for(int i = 0; i < first.length; i++){
     first[i] = values[i];
   }
   
   int[] second = new int[values.length/2];
   
   for(int i = 0; i < second.length; i++){
     second[i] = values[second.length+i];
       
   }
   for(int i =0; i < values.length; i+=2){
    values[i] = first[i];
    values[i+1] = second[i];
   }
   for(int i = 0; i < values.length; i++){
     System.out.println(values[i]);
   }
  
 }
public static int randInt(int min, int max) {

    /* NOTE: This will (intentionally) not run as written so that folks
     copy-pasting have to think about how to initialize their
     Random instance.  Initialization of the Random instance is outside
     the main scope of the question, but some decent options are to have
     a field that is initialized once and then re-used as needed or to
     use ThreadLocalRandom (if using at least Java 1.7).
    
     In particular, do NOT do 'Random rand = new Random()' here or you
     will get not very good / not random results.*/
    Random rand = new Random();

    // nextInt is normally exclusive of the top value,
    // so add 1 to make it inclusive
    int randomNum = rand.nextInt((max - min) + 1) + min;

    return randomNum;
}
 /**
  * Apply an "efficient selection shuffle" to the argument.
  * The selection shuffle algorithm conceptually maintains two sequences
  * of cards: the selected cards (initially empty) and the not-yet-selected
  * cards (initially the entire deck). It repeatedly does the following until
  * all cards have been selected: randomly remove a card from those not yet
  * selected and add it to the selected cards.
  * An efficient version of this algorithm makes use of arrays to avoid
  * searching for an as-yet-unselected card.
  * @param values is an array of integers simulating cards to be shuffled.
  */
 public static void selectionShuffle(int[] values) {
   int[] a = new int[values.length];
   for(int i = 0; i < values.length; i++){
     a[i] = values[randInt(0, values[values.length-1])];
   }
 }
}
